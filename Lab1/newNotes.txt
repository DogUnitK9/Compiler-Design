vardecl :: TYPE varlist SEMI
varlist :: ID | ID COMMA varlist

Walker w = new Walker();
w.registerPost("varlist::id commit varlist", (n)=>{n.count=1+n["varlist"].count;}
w.registerPost("varlist::ID", (n)=>{n.count=1;});
w.walk(root);

class SymbolTable
{
	public List<Scope> scopes;
	SymbolTable()
	{
		this.scopes = new List<Scope>()
		scopes.add(new Scope());   //global
	}
	void addScope()
	{
		scopes.Add();
	}
	void removeScope()
	{
		scopes.Remove();
	}
	void declare()
	{
		this.scopes[^1].declare(string name, VarInfo(new FuncVarType());
	}
	public VarInfo lookup(string name)
	{
		for(int i = scopes.Count - 1; i >= 0; i--)
		{
			Scope s = scopes[i];
			if( s.V.ContainsKey(name))
				return s.v[name];
		}
		error($"No such variable {name}", n);
	}
}

class VarInfo
{
	public VarType type;
	public Token decl;
	public VarInfo(VarType t, Token d)
	{
		this.type = t;
		this.decl = d;
	}
}

class Scope
{
	public new Dictionary<string, VarInfo> v;
	Scope()
	{
		this.v = new Dictionary<string, VarInfo>();
	}
	public declareVariable(string name, VarInfo vi, TreeNode n)
	{
		if(v.ContainsKey(name))
			error($"Duplicate Variable {name}", n);
		v[name] = vi;
	}
}

// Compile function
Walker w = new Walker;
SymbolTable symbolTable = new SymbolTable();
w.registerPre("braceblock :: LBR stmts RBR", (n) => {symbolTable.addScope();});
w.registerPost("braceblock :: LBR stmts RBR", (n) => {symbolTable.removeScope();})

vardecl ::  VAR ID COLON type optionalarray SEMI
w.registerPost("vardecl ::  VAR ID COLON type optionalarray SEMI", (n) => {symbolTable.scopes[^1].declareVariable(n["ID"].token.lexeme; 
																		   new VarInfo(gettypeFromTypeNode(n["type"], n["optionalarray"]),n["ID"].token), n);
																		  });
w.registerPost("atom :: ID", (n) => {symbolTable.lookup(n["ID"].token.lexeme, n);
									 n.type = vi.type;
									})
w.registerPost("optionalarray :: lambda", (n) => {n.attribs["arraySize"] = new List<int>();})
w.registerPost("optionalarray :: LB INUM RB optionalarray", (n) => {var tmp = new List<int>(); 
																	tmp.Add(Int32.Parse(n["INUM"].token.lexeme))
																	tmp.AddRange(n["optionalarray"].attribs["arraySize"]);	
																	n.attribs["arraySize"] = tmp;
																   })
w.registerPost("itemselection :: itemselection LB expr RB", (n) => {ArrayVarType A = n["itemselection"].type as ArrayVarType;
																	if(A==null)
																		error();
																	else
																		n.type = A.baseType;
																	});
// Adjust OUT and INOUT
w.registerPost(new[]{"optionalinout :: lambda", "optioanlinout :: IN"}, (n) => {n.attribs["in"] = true;
																				n.attribs["out"] = false;
																			   });
w.registerPost(new[]{"optionalinout :: lambda", "optioanlinout :: OUT"}, (n) => {n.attribs["in"] = false;
																				 n.attribs["out"] = true;
																			    });
w.registerPost(new[]{"optionalinout :: lambda", "optioanlinout :: INOUT"}, (n) => {n.attribs["in"] = true;
																				   n.attribs["out"] = false;
																			      });
// func foo(in x: int, out y: float, inout z: string)
w.registerPost("param :: optional inout ID COLOR type optionalarray", (n) => {var type = getTypeFromTypeNode(n["type"], n["optionalarray"]);
																			  var p = new Parameter(type, n["ID"], n["optionalinout"].attribs["in"], n["optionalinout"].attribs["out"]);
																			  n.attribs["param"] = p;
																			 });
w.registerPost("funcdecl :: FUNC LP optionalparamlist RP optionalreturn braceblock", (n) => {List<Parameter> p = n["optionalparamlist"].attribs["params"]
																							VarType r = n["optionalreturn"].attibs["retType"]
																							string name = n["ID"].token.lexeme
																							symbolTable.declare(name, new VarInfo(new FuncVarType(p,r)));})
class ArrayVarType : VarType
{
	int size;
	ArrayVarType(VarType, baseType, int size) : base($"{baseType}[{size}]")
	{
		this.size = size;
	}
}
class FuncVarType : VarType
{
	VarType retType;
	List<Parameter> parmTypes;
	FuncVarType(VarType r, List<Parameter> p) : base($"{paramListToString(p)}->{r}")
	{
		this.retType = r;
		this.parmTypes = p;
	}
}
class Parameter
{
	VarType type;
	bool in_;
	bool out_;
	string name;
	Parameter(Vartype t, bool i, bool o, string n)
	{
		this.type = t;
		this.in_ = i;
		this.out_ = o;
		this.string = n;
	}
}


cond
pop rax
cmp rax, 0
je {else}
	true
je {endif}
{else}:
	code
{endif}:

w.registerPost(
				"mullexpr :: mulexpr MULOP powexpr",
				(n) =>{
					string opcode;
					switch(n["MULOP"].token.lexeme){
						case "*":
						case "/": opcode = "idiv"; break;
						case "%":
					}
				
					n.code = new ASM(
						n["mulexpr"].code
						n["powexpr"].code
						new Instr("xor rdx, rdx", "clear rdx for div"),
						new Instr("pop rbx", "this is the denominator"),
						new Instr("pop rax", "this is the numerator"),
						new Instr($"{opcode} rbx"),
						new Instr("push rax")
					);
				}


new Instr("xor rcx, rcx", "clear rcx reg for comparison"),
new Instr("pop rbx", "pop rh op for relop"),
new Instr("pop rax", "pop left"),
new Instr("cmp rax, rbx", "compare"),
new Instr($"set{cc} cl"),     //setlt  cl, setgt  cl, sete   cl
new Instr("push rcx")

class GlobalLocations{
	public string lbl;
}

push rbp          //  <--|
mov rbp, rsp      //prologue
sub rsp, 8    //allocate space for b
sub rsp, 8    //allocate space for c
code
sub rsp, 8    //allocate space for d
mov rsp, rbp     //  <--|
pop rbp          //epilogue
ret              //  <--|

paramWalker.registerPre(
							"assignexpr :: logicalexpr"
							(n) => {
										return false;
									}
						);

public void walk(Treenode n)
{
	if (this.preCallbacks.ContainsKey(n.production))
		if(false == this.preCalbacks[n.production](n))
             return;
    foreach (var c in n.children)
    {
        //if next child matches dictionary key, do callback.
        if (D != null && D.ContainsKey(c.sym))
        {
            D[c.sym](n);
        }
        walk(c);
    }

    //handle any postorder callbacks
    if (this.postCallbacks.ContainsKey(n.production))
        this.postCallbacks[n.production](n);
}


mov rax, 65
push rax
call putc
	lea rax, [rsp+8]
	sub rsp, 8
	mov rbx, rsp
	mov rls, rsp
	//call ForeignFunction();
	add rsp.8
	ret

open: 
	callForeignFunction("CreateFileA", "inputDoTxt", "1", "0", "null", "3", "128", "null")
	ret

open:
	fgetc, similar to putc()

close:
	mov rbx, [rsp+8]
	classForeignFunction("CloseHandle", "rbx");
	ret


//src = rsp
// dest = raz
mov rcx rtype.ByteSize
mov rsi, rsp   ;source addr
mov rdi,rax    ;dest addr
loop as on slide 33
